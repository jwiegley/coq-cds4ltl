#+TITLE: Linear Temporal Logic in Coq

This project is an implementation in Coq of the axiomatic system for linear
temporal logic described in: [[https://dl.acm.org/doi/10.1145/3387109][A Calculational Deductive System for Linear
Temporal Logic]], ACM Computing Surveys, Vol. 53, No. 3, June 2020.

With many thanks to Professor Stan Warford and Dr. Scott Staley for answering
my questions and offering their support and encouragement.

* Overview of Contents

The following is a brief overview of what is provided by this repository. Note
that for axiomatic foundations, both a =Module Type= is given that offers the
axioms, and a =Module= based on that Module Type which develops all of the
theorems that follow from those axiom.

** MinBool

=MinBool.v= defines Boolean logic, based on \not (not), ∨ (or) and three axioms,
using the foundation discovered by Edward Huntington. Note that this is a
classical development, and as such requires assuming the law of the excluded
middle for some of the basic proofs to go through. Future work will include
reworking this foundation on a constructive basis.

** Bool

=Bool.v= extends =MinBool.v= to include the ∧ (and) operation and related
theorems.

** MinLTL

=MinLTL.v= defines the axioms and theorems of Linear Temporal Logic in terms of
the ◯ (next) and U (until) modalities.

** LTL

=LTL.v= extends =MinLTL.v= to include the ◇ (eventually), □ (always) and W (wait)
derived modalities and their theorems. There is also another module type
defining R (release) and M (strong release), although this is relatively
undeveloped at the moment.

** Model

The system of axioms given for LTL above is proved to be sound using a
semantic model of infinite streams, where the propositions of the logic are
taken to be propositional predicates on streams -- that is, mathematical sets
of streams -- where a propoosition is "true" when its set is inhabited,
meaning the predicate holds for all inhabitants of that set at offset zero.
This is expressed using the a satisfaction operator:
#+begin_src coq
[σ, j] ⊨ P
#+end_src

which states that =P= holds at position =j= in stream =σ=. Thus, modalities such as
◯ may be easily defined semantically as:
#+begin_src coq
Definition next := λ p σ, [σ, 1] ⊨ p.
#+end_src

** Syntax and Step

The semantic =Model= above denotes propositions directly into a propositional
logic of sets, which although sound is neither decidable nor computable. To
make practical use of LTL, we require a more reified development. This is
given by the two modules =Syntax.v= and =Step.v=. Syntax defines a deep syntactic
embedding of LTL formula using Positive Normal Form (PNF), although with a
denotation of such constructions into propositional logic similar to =Model.v=,
and a proof that the axioms are sound over this denotation. =Step.v= allows for
a "single step" of reduction given a formula and and a single element of the
input stream, such that it results in either a definitive answer or the next
formula to use on future inputs.

* Work list

** DONE Produce a CDS4LTL proof of (55)
:PROPERTIES:
:ID:       6F57D36C-AE95-4AB6-8843-6A338055DBC3
:CREATED:  [2021-02-11 Thu 08:52]
:END:

** DONE Complete the stream semantic model of LinearTemporalLogic
This may be found in Model.v
:PROPERTIES:
:ID:       20B4D94E-BA32-420E-9EAC-D75FF2E59938
:CREATED:  [2021-02-11 Thu 08:55]
:END:

** TODO Typeset new proof (57): □ ¬p ∧ p U q ⇒ q
:PROPERTIES:
:ID:       FC4ECD01-B161-4081-9C63-4E127FAFBD4F
:CREATED:  [2021-02-11 Thu 10:50]
:END:

** TODO Write a short paper on the Coq formulation of CDS4LTL
:PROPERTIES:
:ID:       40030D5B-9336-4005-BFD1-64F0C2106BE3
:CREATED:  [2021-02-11 Thu 08:58]
:END:

** TODO Read the ACL2 paper that Scott provided
- Note taken on [2021-02-11 Thu 08:57] \\
  Scott to provide a copy of his ACL2 paper to show John a model for what he
  might write up about coq the we could include in the book.
:PROPERTIES:
:ID:       28FC9F46-5D12-4844-997C-C426F7C7120F
:CREATED:  [2021-02-11 Thu 08:57]
:END:

** TODO Starting a new working document
... to cover new work on CDS4LTL/Coq proof discovery; new, reduced axiomatic
foundations for CDS4LTL; and new interesting proofs in LTL. Prof. Warford has
agreed to set up a document template and host it on his GitHub site.
:PROPERTIES:
:ID:       FDB1BB38-9B47-457C-8D10-5A2FF69193CF
:CREATED:  [2021-02-19 Fri 16:20]
:END:
** TODO “Freeze" the current Vega-paper
... and Staley “additional theorems” paper as is; And begin putting all new
work and results into the above new working document.
:PROPERTIES:
:ID:       82551211-7D17-435B-8E34-88BBA0676F8B
:CREATED:  [2021-02-19 Fri 16:20]
:END:
** TODO Build a list of publications and venues our work could be sent to
:PROPERTIES:
:ID:       02A58C25-9C76-44C9-9097-22DAE7A09B73
:CREATED:  [2021-02-19 Fri 16:21]
:END:
** TODO Look into SPOT as time permits
:PROPERTIES:
:ID:       DEAF41D2-E3DB-4460-9391-13BB62C9AA63
:CREATED:  [2021-02-11 Thu 08:57]
:END:

** TODO Build up theorems for Release (R) and Strong Release (M)
:PROPERTIES:
:ID:       6F7FF7D9-E21F-4982-B638-4A8A902D1BE6
:CREATED:  [2021-02-11 Thu 09:46]
:END:
** TODO Explore bi-directional temporal flows
Our semantic model currently is based on infinite streams, with a
satisfiability proposition with j being of type nat:

  (σ, j) ⊨ p

If we use a pair or tuple of infinite streams, where one represents time
looking back, and the other represents time looking forward, then we could use
the same satisfiability condition but with j being of type integer, such that:

  type BiStream = (Stream, Stream)

  ((σ₁, σ₂), n) ⊨ p  <->  if n < 0 then (σ₁, -n) ⊨ p else (σ₂, n) ⊨ p
:PROPERTIES:
:ID:       732E06FD-6EE3-4091-8B9B-7EF4F473DC97
:CREATED:  [2021-02-22 Mon 14:34]
:END:
** TODO Review the Mathematical Philosophy courses at Pepperdine
:PROPERTIES:
:ID:       7AB85D85-7988-4E25-9A36-2AD3491CA1B2
:CREATED:  [2021-02-19 Fri 16:21]
:URL:      https://github.com/ashumeow/introduction-to-mathematical-philosophy
:END:
** DONE Write a program to produce an ideal ordering of the LTL theorems
This would first build a dependency graph, and then for items at the same
level, order them based on term complexity.
:PROPERTIES:
:ID:       70E545FF-5640-4E48-AE24-F818F53A9E52
:CREATED:  [2021-02-19 Fri 10:43]
:END:
** DONE Prove the new axiom relating individual terms to until
p ∧ q U ¬p ⇒ (q ∧ p) U (q ∧ p ∧ ¬◯ p)
:PROPERTIES:
:ID:       DB0F1502-BE6B-4F48-B524-25CD4A0D8A4C
:CREATED:  [2021-02-22 Mon 14:35]
:END:
** DONE Typeset the proof of (55) in LaTeX
#+begin_src text
(55) □ (p ⇒ (◯ p ∧ q) ∨ r) ⟹ p ⇒ □ q ∨ q U r

  Proof:

      p ⇒ □ q ∨ q U r
    =   ⟨¬¬p ≡ p⟩
      ¬¬(p ⇒ □ q ∨ q U r)
    =   ⟨(54) Definition of □⟩
      ¬¬(p ⇒ ¬◇ ¬q ∨ q U r)
    =   ⟨(38) Deﬁnition of ◇⟩
      ¬¬(p ⇒ ¬(⊤ U ¬q) ∨ q U r)
    =   ⟨p ⇒ q ≡ ¬p ∨ q, ¬(p ∨ q) ≡ ¬p ∧ ¬q⟩
      ¬(¬¬p ∧ ¬¬(⊤ U ¬q) ∧ ¬(q U r))
    =   ⟨¬¬p ≡ p⟩
      ¬(p ∧ ⊤ U ¬q ∧ ¬(q U r))
    =   ⟨(170) Axiom, Distributivity of ¬over W⟩
      ¬(p ∧ ¬r U (¬q ∧ ¬r))
    =   ⟨p ≡ ⊤ ∧ p⟩
      ¬((⊤ ∧ p) ∧ ¬r U (¬q ∧ ¬r))
    =   ⟨(90) □ excluded middle⟩
      ¬(((□ p ∨ ◇ ¬p) ∧ p) ∧ ¬r U (¬q ∧ ¬r))
    =   ⟨(p ∨ q) ∧ r ≡ (p ∧ r) ∨ (p ∧ q)⟩
      ¬((□ p ∧ p ∨ ◇ ¬p ∧ p) ∧ ¬r U (¬q ∧ ¬r))
    =   ⟨(p ∨ q) ∧ r ≡ (p ∧ r) ∨ (p ∧ q)⟩
      ¬((□ p ∧ p) ∧ ¬r U (¬q ∧ ¬r) ∨ (◇ ¬p ∧ p) ∧ ¬r U (¬q ∧ ¬r))
    ⇒   ⟨p ∧ q ⇒ p⟩
      ¬(□ p ∧ ¬r U (¬q ∧ ¬r) ∨ (◇ ¬p ∧ p) ∧ ¬r U (¬q ∧ ¬r))
    =   ⟨p ∧ q ≡ q ∧ p⟩
      ¬(□ p ∧ ¬r U (¬q ∧ ¬r) ∨ (p ∧ ◇ ¬p) ∧ ¬r U (¬q ∧ ¬r))
    ⇒   ⟨(83) Distributivity of ∧ over U⟩
      ¬((p ∧ ¬r) U (p ∧ ¬q ∧ ¬r) ∨ (p ∧ ◇ ¬p) ∧ ¬r U (¬q ∧ ¬r))
    =   ⟨(42) Eventuality⟩
      ¬(◇ (p ∧ ¬q ∧ ¬r) ∨ (p ∧ ◇ ¬p) ∧ ¬r U (¬q ∧ ¬r))
    =   ⟨p ≡ p ∨ q, p ⇒ q ≡ ¬p ∨ q⟩
      ¬(◇ (p ∧ (q ⇒ ¬◯ p) ∧ ¬r) ∨ (p ∧ ◇ ¬p) ∧ ¬r U (¬q ∧ ¬r))
    =   ⟨p ∨ q ≡ q ∨ p⟩
      ¬(◇ (p ∧ (◯ p ⇒ ¬q) ∧ ¬r) ∨ (p ∧ ◇ ¬p) ∧ ¬r U (¬q ∧ ¬r))
    ⇒   ⟨(75) p ∧ ◇ ¬p ⇒ ◇ (p ∧ ◯ ¬p)⟩
      ¬(◇ (p ∧ (◯ p ⇒ ¬q) ∧ ¬r) ∨ p U (p ∧ ¬◯ p) ∧ ¬r U (¬q ∧ ¬r))
    ⇒   ⟨(NEW) Axiom, Distributivity of ∧ over U⟩
      ¬(◇ (p ∧ (◯ p ⇒ ¬q) ∧ ¬r) ∨ (p ∧ ¬r) U ((p ∧ ¬◯ p) ∧ ¬r ∨ p ∧ ¬q ∧ ¬r ∨ (p ∧ ¬◯ p) ∧ ¬q ∧ ¬r))
    =   ⟨(42) Eventuality⟩
      ¬(◇ (p ∧ (◯ p ⇒ ¬q) ∧ ¬r) ∨ ◇ ((p ∧ ¬◯ p) ∧ ¬r ∨ p ∧ ¬q ∧ ¬r ∨ (p ∧ ¬◯ p) ∧ ¬q ∧ ¬r))
    ⇒   ⟨p ∧ q ⇒ p⟩
      ¬(◇ (p ∧ (◯ p ⇒ ¬q) ∧ ¬r) ∨ ◇ ((p ∧ ¬◯ p) ∧ ¬r ∨ p ∧ ¬q ∧ ¬r ∨ p ∧ ¬q ∧ ¬r))
    =   ⟨p ∨ p ≡ p⟩
      ¬(◇ (p ∧ (◯ p ⇒ ¬q) ∧ ¬r) ∨ ◇ ((p ∧ ¬◯ p) ∧ ¬r ∨ p ∧ ¬q ∧ ¬r))
    =   ⟨p ∧ (q ∧ r) ≡ (p ∧ q) ∧ r⟩
      ¬(◇ (p ∧ (◯ p ⇒ ¬q) ∧ ¬r) ∨ ◇ (p ∧ ¬◯ p ∧ ¬r ∨ p ∧ ¬q ∧ ¬r))
    =   ⟨(p ∧ q) ∨ (p ∧ r) ≡ p ∧ (q ∨ r)⟩
      ¬(◇ (p ∧ (◯ p ⇒ ¬q) ∧ ¬r) ∨ ◇ (p ∧ (¬◯ p ∧ ¬r ∨ ¬q ∧ ¬r)))
    =   ⟨(p ∧ r) ∨ (q ∧ r) ≡ (p ∨ q) ∧ r⟩
      ¬(◇ (p ∧ (◯ p ⇒ ¬q) ∧ ¬r) ∨ ◇ (p ∧ (◯ p ⇒ ¬q) ∧ ¬r))
    =   ⟨p ∨ p ≡ p⟩
      ¬◇ (p ∧ (◯ p ⇒ ¬q) ∧ ¬r)
    =   ⟨p ∧ q ≡ ¬(¬p ∨ ¬q)⟩
      ¬◇ ¬(p ⇒ ¬¬((◯ p ⇒ ¬q) ⇒ ¬¬r))
    =   ⟨¬¬p ≡ p⟩
      ¬◇ ¬(p ⇒ (◯ p ⇒ ¬q) ⇒ r)
    =   ⟨¬(p ∨ q) ≡ ¬p ∧ ¬q⟩
      ¬◇ ¬(p ⇒ ¬¬◯ p ∧ ¬¬q ∨ r)
    =   ⟨¬¬p ≡ p⟩
      ¬◇ ¬(p ⇒ ◯ p ∧ q ∨ r)
    =   ⟨(54) Definition of □⟩
      □ (p ⇒ ◯ p ∧ q ∨ r)    ∎
#+end_src
** DONE Typeset the proof of (56) in LaTeX
- Note taken on [2021-02-11 Thu 08:57] \\
  Scott to provide a template LaTeX file for John to typeset his new (56)
  Theorem proof.

#+begin_src text
(56) □ (p ⇒ ◯ (p ∨ q)) ⇒ p ⇒ □ p ∨ p U q

 Proof:

     true
   =   ⟨(55) Axiom, U Induction, with p := p, q := ◯ p, r := ◯ q⟩
     □ (p ⇒ (◯ p ∧ ◯ p) ∨ ◯ q) ⇒ (p ⇒ □ ◯ p ∨ ◯ p U ◯ q)
   =   ⟨idempotency of ∧⟩
     □ (p ⇒ ◯ p ∨ ◯ q) ⇒ (p ⇒ □ ◯ p ∨ ◯ p U ◯ q)
   =   ⟨(4) Distributivity of ◯ over ∨⟩
     □ (p ⇒ ◯ (p ∨ q)) ⇒ (p ⇒ □ ◯ p ∨ ◯ p U ◯ q)
   =   ⟨⊤ ∧ p ≡ p⟩
     □ (p ⇒ ◯ (p ∨ q)) ⇒ ⊤ ∧ (p ⇒ □ ◯ p ∨ ◯ p U ◯ q)
   =   ⟨p ⇒ p ≡ ⊤⟩
     □ (p ⇒ ◯ (p ∨ q)) ⇒ (p ⇒ p) ∧ (p ⇒ □ ◯ p ∨ (◯ p U ◯ q))
   =   ⟨p ⇒ q ≡ ¬p ∨ q, ∨ distributes over ∧⟩
     □ (p ⇒ ◯ (p ∨ q)) ⇒ (p ⇒ p ∧ (□ ◯ p ∨ ◯ p U ◯ q))
   =   ⟨∧ distributes over ∨⟩
     □ (p ⇒ ◯ (p ∨ q)) ⇒ (p ⇒ (p ∧ □ ◯ p) ∨ (p ∧ ◯ p U ◯ q))
   =>  ⟨p ⇒ p ∨ q, with p := p ∧ b, q := q⟩
     □ (p ⇒ ◯ (p ∨ q)) ⇒ (p ⇒ ((p ∧ □ ◯ p) ∨ q) ∨ (p ∧ ◯ p U ◯ q))
   =   ⟨commutativity of ∨⟩
     □ (p ⇒ ◯ (p ∨ q)) ⇒ (p ⇒ (q ∨ (p ∧ □ ◯ p)) ∨ (p ∧ ◯ p U ◯ q))
   =   ⟨(9) Axiom, Distributivity of ◯ over U⟩
     □ (p ⇒ ◯ (p ∨ q)) ⇒ (p ⇒ (q ∨ (p ∧ □ ◯ p)) ∨ (p ∧ ◯ (p U q)))
   =   ⟨(10) Axiom, Expansion of U⟩
     □ (p ⇒ ◯ (p ∨ q)) ⇒ (p ⇒ (p ∧ □ ◯ p) ∨ (p U q))
   =   ⟨(73) Exchange of ◯ and □⟩
     □ (p ⇒ ◯ (p ∨ q)) ⇒ (p ⇒ (p ∧ ◯ □ p) ∨ (p U q))
   =   ⟨(66) Expansion of □⟩
     □ (p ⇒ ◯ (p ∨ q)) ⇒ (p ⇒ (□ p ∨ (p U q)))    ∎
#+end_src
:PROPERTIES:
:ID:       A3ABA0D7-A3A9-48F9-88E7-F03BC60D6E1B
:CREATED:  [2021-02-11 Thu 08:57]
:END:

** DONE Typeset the proof of (58) in LaTeX
#+begin_src text
(58) □ (◯ p ⇒ p) ⇒ (◇ p ⇒ p)

 Proof:

     true
   =   ⟨(56) Axiom, U Induction, with p := ¬p, q := ⊥⟩
     □ (¬p ⇒ ◯ (¬p ∨ ⊥)) ⇒ (¬p ⇒ □ ¬p ∨ (¬p U ⊥))
   =   ⟨(11) Axiom, Right zero of U⟩
     □ (¬p ⇒ ◯ (¬p ∨ ⊥)) ⇒ (¬p ⇒ □ ¬p ∨ ⊥)
   =   ⟨p ∨ ⊥ ≡ p⟩
     □ (¬p ⇒ ◯ ¬p) ⇒ (¬p ⇒ □ ¬p)
   =   ⟨(3) Linearity⟩
     □ (¬p ⇒ ¬(◯ ¬¬p)) ⇒ (¬p ⇒ □ ¬p)
   =   ⟨¬¬p ≡ p, ¬p ⇒ q ≡ p ∨ q⟩
     □ (p ∨ ¬ ◯ p) ⇒ p ∨ □ ¬p
   =   ⟨commutativity of ∨, p ⇒ q ≡ ¬p ∨ q⟩
     □ (◯ p ⇒ p) ⇒ □ ¬p ∨ p
   =   ⟨(54) Definition of □⟩
     □ (◯ p ⇒ p) ⇒ (¬◇ ¬¬p ∨ p)
   =>  ⟨¬¬p ≡ p, p ⇒ q ≡ ¬p ∨ q⟩
     □ (◯ p ⇒ p) ⇒ (◇ p ⇒ p)    ∎
#+end_src
:PROPERTIES:
:ID:       51EF7EE2-09A1-41EC-92B6-DE8B12A7699D
:CREATED:  [2021-02-11 Thu 10:43]
:END:

** DONE Prove monotonicity properties of the modal operators
:PROPERTIES:
:ID:       6478060E-DEFE-4F03-BD26-2DA3CF3EEA4A
:CREATED:  [2021-02-11 Thu 08:59]
:END:

** DONE Find an appropriate statement of (82)
:PROPERTIES:
:ID:       5D6FD9DA-0C74-424A-B6A0-6F10CB85D13E
:CREATED:  [2021-02-11 Thu 11:30]
:END:

** DONE Is =Proper (impl ==> impl) eventually= a valid statement?
:PROPERTIES:
:ID:       A4DB0B7D-171D-4438-999A-0FF968C0F9E0
:CREATED:  [2021-02-11 Thu 08:55]
:END:

** DONE Find a more minimal set of until axioms
:PROPERTIES:
:ID:       E78658FF-D458-46FB-A0EA-6D826CF227CB
:CREATED:  [2021-02-11 Thu 08:56]
:END:

** DONE Take a fresh-eyes look at the Dummett formula
:PROPERTIES:
:ID:       4E133597-5BC0-4873-9F85-A20137E80F7B
:CREATED:  [2021-02-11 Thu 08:58]
:END:

** DONE Find a better axiomatic basis for proving (82)
:PROPERTIES:
:ID:       2540261A-82CE-4CD2-838C-32847BC3BD4B
:CREATED:  [2021-02-11 Thu 08:58]
:END:

** DONE Rebuild the syntactic, Mealy-machine based evaluation model
:PROPERTIES:
:ID:       DE89F702-84A9-407D-AA4F-FCABB7F2394A
:CREATED:  [2021-02-11 Thu 09:39]
:END:

** DONE Typeset new proof (238)
:PROPERTIES:
:ID:       6848091F-39F6-4D56-AD71-540C507BBF95
:CREATED:  [2021-02-19 Fri 10:56]
:END:

* Agenda for [2021-03-05 Fri]

1. Some information on [p U q]. I don’t remember the discussion that raised
   this point, but a few comments anyway.

2. Proofs for (12) (15) and (16) on the basis of the new set of axioms.

3. Discuss outline of new paper proposed by Prof. Warford.

4. CDS proof of (55) and calculational deductive system proofs in general.
